// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wasmrollapp/cron/v1beta1/cron.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WhitelistedContract struct {
	// game_id is the unique identifier for the game
	GameId uint64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// security_address is the address of the security contract
	SecurityAddress string `protobuf:"bytes,2,opt,name=security_address,json=securityAddress,proto3" json:"security_address,omitempty"`
	// contract_admin is the address of the contract admin
	ContractAdmin string `protobuf:"bytes,3,opt,name=contract_admin,json=contractAdmin,proto3" json:"contract_admin,omitempty"`
	// game_name is the name of the game
	GameName string `protobuf:"bytes,4,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	// contract_address is the address of the contract
	ContractAddress string `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// game_type is the type of the game, single player or multiplayer or both
	GameType uint64 `protobuf:"varint,6,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
}

func (m *WhitelistedContract) Reset()         { *m = WhitelistedContract{} }
func (m *WhitelistedContract) String() string { return proto.CompactTextString(m) }
func (*WhitelistedContract) ProtoMessage()    {}
func (*WhitelistedContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad6aacd87fd409ed, []int{0}
}
func (m *WhitelistedContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistedContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistedContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistedContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistedContract.Merge(m, src)
}
func (m *WhitelistedContract) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistedContract) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistedContract.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistedContract proto.InternalMessageInfo

func (m *WhitelistedContract) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *WhitelistedContract) GetSecurityAddress() string {
	if m != nil {
		return m.SecurityAddress
	}
	return ""
}

func (m *WhitelistedContract) GetContractAdmin() string {
	if m != nil {
		return m.ContractAdmin
	}
	return ""
}

func (m *WhitelistedContract) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *WhitelistedContract) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *WhitelistedContract) GetGameType() uint64 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func init() {
	proto.RegisterType((*WhitelistedContract)(nil), "wasmrollapp.cron.v1beta1.WhitelistedContract")
}

func init() {
	proto.RegisterFile("wasmrollapp/cron/v1beta1/cron.proto", fileDescriptor_ad6aacd87fd409ed)
}

var fileDescriptor_ad6aacd87fd409ed = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x1b, 0x9d, 0xd5, 0x05, 0xfc, 0x43, 0x3d, 0x18, 0x10, 0xc2, 0x50, 0x84, 0x79, 0xb0,
	0xa5, 0xf8, 0x09, 0xa6, 0x27, 0x11, 0x3c, 0x0c, 0x41, 0xf0, 0x52, 0xd2, 0x26, 0x6c, 0x81, 0x26,
	0x29, 0x49, 0xa6, 0xab, 0x9f, 0xc2, 0x8f, 0xe5, 0x71, 0x47, 0x8f, 0xd2, 0xe2, 0xf7, 0x90, 0xa4,
	0x2d, 0xee, 0xf8, 0xfe, 0x78, 0xf8, 0x3d, 0x2f, 0x0f, 0xbc, 0x7c, 0x27, 0x46, 0x68, 0x55, 0x96,
	0xa4, 0xaa, 0x92, 0x42, 0x2b, 0x99, 0xbc, 0xa5, 0x39, 0xb3, 0x24, 0xf5, 0x47, 0x5c, 0x69, 0x65,
	0x55, 0x84, 0xb6, 0x42, 0xb1, 0xe7, 0x7d, 0xe8, 0xe2, 0x17, 0xc0, 0xd3, 0x97, 0x25, 0xb7, 0xac,
	0xe4, 0xc6, 0x32, 0x7a, 0xaf, 0xa4, 0xd5, 0xa4, 0xb0, 0xd1, 0x19, 0xdc, 0x5f, 0x10, 0xc1, 0x32,
	0x4e, 0x11, 0x98, 0x80, 0xe9, 0x68, 0x1e, 0xba, 0xf3, 0x81, 0x46, 0xd7, 0xf0, 0xc4, 0xb0, 0x62,
	0xa5, 0xb9, 0xad, 0x33, 0x42, 0xa9, 0x66, 0xc6, 0xa0, 0x9d, 0x09, 0x98, 0x8e, 0xe7, 0xc7, 0x03,
	0x9f, 0x75, 0x38, 0xba, 0x82, 0x47, 0x45, 0xef, 0xcb, 0x08, 0x15, 0x5c, 0xa2, 0x5d, 0x1f, 0x3c,
	0x1c, 0xe8, 0xcc, 0xc1, 0xe8, 0x1c, 0x8e, 0x7d, 0x95, 0x24, 0x82, 0xa1, 0x91, 0x4f, 0x1c, 0x38,
	0xf0, 0x44, 0x04, 0x73, 0x75, 0x5b, 0x8e, 0xae, 0x6e, 0xaf, 0xab, 0xfb, 0xb7, 0x74, 0x75, 0x83,
	0xc7, 0xd6, 0x15, 0x43, 0xa1, 0x7f, 0xda, 0x7b, 0x9e, 0xeb, 0x8a, 0xdd, 0x3d, 0x7e, 0x35, 0x18,
	0x6c, 0x1a, 0x0c, 0x7e, 0x1a, 0x0c, 0x3e, 0x5b, 0x1c, 0x6c, 0x5a, 0x1c, 0x7c, 0xb7, 0x38, 0x78,
	0x4d, 0x17, 0xdc, 0x2e, 0x57, 0x79, 0x5c, 0x28, 0x91, 0xd0, 0x5a, 0x30, 0x69, 0xb8, 0x92, 0xeb,
	0xfa, 0x23, 0xe9, 0xf7, 0xba, 0x71, 0xdb, 0x25, 0xeb, 0x6e, 0x5b, 0xe7, 0x36, 0x79, 0xe8, 0x57,
	0xbd, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x82, 0x7d, 0x13, 0xbc, 0x7c, 0x01, 0x00, 0x00,
}

func (m *WhitelistedContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistedContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistedContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameType != 0 {
		i = encodeVarintCron(dAtA, i, uint64(m.GameType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintCron(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GameName) > 0 {
		i -= len(m.GameName)
		copy(dAtA[i:], m.GameName)
		i = encodeVarintCron(dAtA, i, uint64(len(m.GameName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAdmin) > 0 {
		i -= len(m.ContractAdmin)
		copy(dAtA[i:], m.ContractAdmin)
		i = encodeVarintCron(dAtA, i, uint64(len(m.ContractAdmin)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityAddress) > 0 {
		i -= len(m.SecurityAddress)
		copy(dAtA[i:], m.SecurityAddress)
		i = encodeVarintCron(dAtA, i, uint64(len(m.SecurityAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameId != 0 {
		i = encodeVarintCron(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCron(dAtA []byte, offset int, v uint64) int {
	offset -= sovCron(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhitelistedContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovCron(uint64(m.GameId))
	}
	l = len(m.SecurityAddress)
	if l > 0 {
		n += 1 + l + sovCron(uint64(l))
	}
	l = len(m.ContractAdmin)
	if l > 0 {
		n += 1 + l + sovCron(uint64(l))
	}
	l = len(m.GameName)
	if l > 0 {
		n += 1 + l + sovCron(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovCron(uint64(l))
	}
	if m.GameType != 0 {
		n += 1 + sovCron(uint64(m.GameType))
	}
	return n
}

func sovCron(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCron(x uint64) (n int) {
	return sovCron(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhitelistedContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCron
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistedContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistedContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCron
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCron
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCron
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCron
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCron
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCron
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCron
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCron
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCron
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCron
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCron
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCron
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCron
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCron
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCron(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCron
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCron(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCron
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCron
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCron
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCron
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCron
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCron
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCron        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCron          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCron = fmt.Errorf("proto: unexpected end of group")
)
